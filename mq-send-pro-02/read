通过direct交换机进行消息处理
一、创建项目
二、添加依赖
<!-- rabbitmq依赖-->
<dependencies>
    <dependency>
        <groupId>com.rabbitmq</groupId>
        <artifactId>amqp-client</artifactId>
        <version>5.14.2</version>
    </dependency>
</dependencies>
三、写demo
public static void main(String[] args) {
    // 创建连接工厂
    ConnectionFactory factory = new ConnectionFactory();
    // rabbitmq配置
    factory.setHost("localhost");
    factory.setPort(5672);
    factory.setUsername("guest");
    factory.setPassword("guest");
    //定义连接
    Connection connection = null;
    //定义通道
    Channel channel = null;
    // 推送信息
    try {
        // 获取连接
        connection = factory.newConnection();
        // 获取通道
        channel = connection.createChannel();
        /*
         * 声明队列
         * 参数1：队列名取值任意
         * 参数2：是否持久化队列
         * 参数3：是否排外，如果排外的话则队列只允许一个消费者监听
         * 参数4：是否自动删除队列，如果为true则表示队列中消息为空，同时也灭有消费者连接就会自动删除这个队列
         * 参数5：消息队列一些其他属性设置
         * */
        channel.queueDeclare("myDirectQueue",true,false,false,null);
        channel.queueDeclare("myDirectQueueTwo",true,false,false,null);
        /*
        * 声明交换机
        * 参数一：交换机名字，可取任意值
        * 参数二：交换机的类型，取值为direct，fanout，topic，headers
        * 参数三：是否为持久化交换机
        * 注意：
        * 1、声明时如果存在交换机就会取消声明，如果不存在就会声明
        * 2、这个代码可有可无，但是在使用前必须要确保这个交换机被声明
        * */
        channel.exchangeDeclare("directExchange","direct",true);
        /*
        * 绑定交换机
        * 参数一：队列名称
        * 参数二：交换机名称
        * 参数三：消息的RoutingKey（就是BindingKey）
        * 注：
        * 1、在进行队列队列和交换机绑定时必须要确保交换机和队列已经成功声明
        * */
        channel.queueBind("myDirectQueue","directExchange","directRoutingKey");
        channel.queueBind("myDirectQueueTwo","directExchange","directRoutingKey");
        /*
         * 发送消息
         * 参数1：交换机名称
         * 参数2：队列名或者RoutingKey，如果RoutingKey和和某个队列和交换机绑定，就会发送到指定队列中
         * 参数3：消息属性信息，通常空即可
         * 参数4：为具体消息数据的字节数组
         * 注意：消息队列如果要该不同的消息推送上去，需要新建一个消息队列名，否则是不会推送上去的
         * */
        String message = "我的RabbitMq测试消息";
        String messageTwo = "我的RabbitMq测试消息==========";
        channel.basicPublish("directExchange","directRoutingKey",null,message.getBytes("utf-8"));
        channel.basicPublish("directExchange","myDirectQueueTwo",null,messageTwo.getBytes("utf-8"));
        // 响应
        System.out.println("发送消息成功");
    } catch (IOException e) {
        e.printStackTrace();
    } catch (TimeoutException e) {
        e.printStackTrace();
    }finally {
        // 关闭连接
        if(channel != null){
            try {
                channel.close();
            } catch (IOException e) {
                e.printStackTrace();
            } catch (TimeoutException e) {
                e.printStackTrace();
            }
        }
        if (connection != null){
            try {
                connection.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
